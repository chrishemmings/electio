<?php
/**
 * ConsignmentApi
 * PHP version 5
 *
 * @category Class
 * @package  ChrisHemmings\Electio
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Electio API
 *
 * A minimal Electio client
 *
 * OpenAPI spec version: 1.0.12
 * Contact: chris@hemmin.gs
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChrisHemmings\Electio\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ChrisHemmings\Electio\ApiException;
use ChrisHemmings\Electio\Configuration;
use ChrisHemmings\Electio\HeaderSelector;
use ChrisHemmings\Electio\ObjectSerializer;

/**
 * ConsignmentApi Class Doc Comment
 *
 * @category Class
 * @package  ChrisHemmings\Electio
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConsignmentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createConsignment
     *
     * Create a consignment
     *
     * @param  string $electio_api_version Electio API Version (required)
     * @param  \ChrisHemmings\Electio\Client\Model\CreateConsignment $consignment Consignment to create (optional)
     *
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChrisHemmings\Electio\Client\Model\CreateConsignmentResponse[]
     */
    public function createConsignment($electio_api_version, $consignment = null)
    {
        list($response) = $this->createConsignmentWithHttpInfo($electio_api_version, $consignment);
        return $response;
    }

    /**
     * Operation createConsignmentWithHttpInfo
     *
     * Create a consignment
     *
     * @param  string $electio_api_version Electio API Version (required)
     * @param  \ChrisHemmings\Electio\Client\Model\CreateConsignment $consignment Consignment to create (optional)
     *
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChrisHemmings\Electio\Client\Model\CreateConsignmentResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createConsignmentWithHttpInfo($electio_api_version, $consignment = null)
    {
        $returnType = '\ChrisHemmings\Electio\Client\Model\CreateConsignmentResponse[]';
        $request = $this->createConsignmentRequest($electio_api_version, $consignment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChrisHemmings\Electio\Client\Model\CreateConsignmentResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChrisHemmings\Electio\Client\Model\ResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createConsignmentAsync
     *
     * Create a consignment
     *
     * @param  string $electio_api_version Electio API Version (required)
     * @param  \ChrisHemmings\Electio\Client\Model\CreateConsignment $consignment Consignment to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createConsignmentAsync($electio_api_version, $consignment = null)
    {
        return $this->createConsignmentAsyncWithHttpInfo($electio_api_version, $consignment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createConsignmentAsyncWithHttpInfo
     *
     * Create a consignment
     *
     * @param  string $electio_api_version Electio API Version (required)
     * @param  \ChrisHemmings\Electio\Client\Model\CreateConsignment $consignment Consignment to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createConsignmentAsyncWithHttpInfo($electio_api_version, $consignment = null)
    {
        $returnType = '\ChrisHemmings\Electio\Client\Model\CreateConsignmentResponse[]';
        $request = $this->createConsignmentRequest($electio_api_version, $consignment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createConsignment'
     *
     * @param  string $electio_api_version Electio API Version (required)
     * @param  \ChrisHemmings\Electio\Client\Model\CreateConsignment $consignment Consignment to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createConsignmentRequest($electio_api_version, $consignment = null)
    {
        // verify the required parameter 'electio_api_version' is set
        if ($electio_api_version === null || (is_array($electio_api_version) && count($electio_api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electio_api_version when calling createConsignment'
            );
        }

        $resourcePath = '/consignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($electio_api_version !== null) {
            $headerParams['electio-api-version'] = ObjectSerializer::toHeaderValue($electio_api_version);
        }


        // body params
        $_tempBody = null;
        if (isset($consignment)) {
            $_tempBody = $consignment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConsignment
     *
     * Fetch a consignment by reference
     *
     * @param  string $consignment_reference Consignment to create (required)
     * @param  string $electio_api_version Electio API Version (required)
     *
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChrisHemmings\Electio\Client\Model\Consignment
     */
    public function getConsignment($consignment_reference, $electio_api_version)
    {
        list($response) = $this->getConsignmentWithHttpInfo($consignment_reference, $electio_api_version);
        return $response;
    }

    /**
     * Operation getConsignmentWithHttpInfo
     *
     * Fetch a consignment by reference
     *
     * @param  string $consignment_reference Consignment to create (required)
     * @param  string $electio_api_version Electio API Version (required)
     *
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChrisHemmings\Electio\Client\Model\Consignment, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConsignmentWithHttpInfo($consignment_reference, $electio_api_version)
    {
        $returnType = '\ChrisHemmings\Electio\Client\Model\Consignment';
        $request = $this->getConsignmentRequest($consignment_reference, $electio_api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChrisHemmings\Electio\Client\Model\Consignment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConsignmentAsync
     *
     * Fetch a consignment by reference
     *
     * @param  string $consignment_reference Consignment to create (required)
     * @param  string $electio_api_version Electio API Version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConsignmentAsync($consignment_reference, $electio_api_version)
    {
        return $this->getConsignmentAsyncWithHttpInfo($consignment_reference, $electio_api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConsignmentAsyncWithHttpInfo
     *
     * Fetch a consignment by reference
     *
     * @param  string $consignment_reference Consignment to create (required)
     * @param  string $electio_api_version Electio API Version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConsignmentAsyncWithHttpInfo($consignment_reference, $electio_api_version)
    {
        $returnType = '\ChrisHemmings\Electio\Client\Model\Consignment';
        $request = $this->getConsignmentRequest($consignment_reference, $electio_api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConsignment'
     *
     * @param  string $consignment_reference Consignment to create (required)
     * @param  string $electio_api_version Electio API Version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConsignmentRequest($consignment_reference, $electio_api_version)
    {
        // verify the required parameter 'consignment_reference' is set
        if ($consignment_reference === null || (is_array($consignment_reference) && count($consignment_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consignment_reference when calling getConsignment'
            );
        }
        // verify the required parameter 'electio_api_version' is set
        if ($electio_api_version === null || (is_array($electio_api_version) && count($electio_api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electio_api_version when calling getConsignment'
            );
        }

        $resourcePath = '/consignments/{consignmentReference}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($electio_api_version !== null) {
            $headerParams['electio-api-version'] = ObjectSerializer::toHeaderValue($electio_api_version);
        }

        // path params
        if ($consignment_reference !== null) {
            $resourcePath = str_replace(
                '{' . 'consignmentReference' . '}',
                ObjectSerializer::toPathValue($consignment_reference),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConsignmentSummary
     *
     * Fetch a summary of consignment statuses
     *
     * @param  string $electio_api_version Electio API Version (required)
     * @param  \DateTime $start_from Start date range (optional)
     * @param  \DateTime $end_at End date range (optional)
     *
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChrisHemmings\Electio\Client\Model\SummaryResponse
     */
    public function getConsignmentSummary($electio_api_version, $start_from = null, $end_at = null)
    {
        list($response) = $this->getConsignmentSummaryWithHttpInfo($electio_api_version, $start_from, $end_at);
        return $response;
    }

    /**
     * Operation getConsignmentSummaryWithHttpInfo
     *
     * Fetch a summary of consignment statuses
     *
     * @param  string $electio_api_version Electio API Version (required)
     * @param  \DateTime $start_from Start date range (optional)
     * @param  \DateTime $end_at End date range (optional)
     *
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChrisHemmings\Electio\Client\Model\SummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConsignmentSummaryWithHttpInfo($electio_api_version, $start_from = null, $end_at = null)
    {
        $returnType = '\ChrisHemmings\Electio\Client\Model\SummaryResponse';
        $request = $this->getConsignmentSummaryRequest($electio_api_version, $start_from, $end_at);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChrisHemmings\Electio\Client\Model\SummaryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConsignmentSummaryAsync
     *
     * Fetch a summary of consignment statuses
     *
     * @param  string $electio_api_version Electio API Version (required)
     * @param  \DateTime $start_from Start date range (optional)
     * @param  \DateTime $end_at End date range (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConsignmentSummaryAsync($electio_api_version, $start_from = null, $end_at = null)
    {
        return $this->getConsignmentSummaryAsyncWithHttpInfo($electio_api_version, $start_from, $end_at)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConsignmentSummaryAsyncWithHttpInfo
     *
     * Fetch a summary of consignment statuses
     *
     * @param  string $electio_api_version Electio API Version (required)
     * @param  \DateTime $start_from Start date range (optional)
     * @param  \DateTime $end_at End date range (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConsignmentSummaryAsyncWithHttpInfo($electio_api_version, $start_from = null, $end_at = null)
    {
        $returnType = '\ChrisHemmings\Electio\Client\Model\SummaryResponse';
        $request = $this->getConsignmentSummaryRequest($electio_api_version, $start_from, $end_at);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConsignmentSummary'
     *
     * @param  string $electio_api_version Electio API Version (required)
     * @param  \DateTime $start_from Start date range (optional)
     * @param  \DateTime $end_at End date range (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConsignmentSummaryRequest($electio_api_version, $start_from = null, $end_at = null)
    {
        // verify the required parameter 'electio_api_version' is set
        if ($electio_api_version === null || (is_array($electio_api_version) && count($electio_api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electio_api_version when calling getConsignmentSummary'
            );
        }

        $resourcePath = '/consignments/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_from !== null) {
            $queryParams['startFrom'] = ObjectSerializer::toQueryValue($start_from);
        }
        // query params
        if ($end_at !== null) {
            $queryParams['endAt'] = ObjectSerializer::toQueryValue($end_at);
        }
        // header params
        if ($electio_api_version !== null) {
            $headerParams['electio-api-version'] = ObjectSerializer::toHeaderValue($electio_api_version);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConsignmentWithMetadata
     *
     * Fetch a consignment by reference with metadata
     *
     * @param  string $consignment_reference Consignment to create (required)
     * @param  string $electio_api_version Electio API Version (required)
     *
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChrisHemmings\Electio\Client\Model\Consignment
     */
    public function getConsignmentWithMetadata($consignment_reference, $electio_api_version)
    {
        list($response) = $this->getConsignmentWithMetadataWithHttpInfo($consignment_reference, $electio_api_version);
        return $response;
    }

    /**
     * Operation getConsignmentWithMetadataWithHttpInfo
     *
     * Fetch a consignment by reference with metadata
     *
     * @param  string $consignment_reference Consignment to create (required)
     * @param  string $electio_api_version Electio API Version (required)
     *
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChrisHemmings\Electio\Client\Model\Consignment, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConsignmentWithMetadataWithHttpInfo($consignment_reference, $electio_api_version)
    {
        $returnType = '\ChrisHemmings\Electio\Client\Model\Consignment';
        $request = $this->getConsignmentWithMetadataRequest($consignment_reference, $electio_api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChrisHemmings\Electio\Client\Model\Consignment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConsignmentWithMetadataAsync
     *
     * Fetch a consignment by reference with metadata
     *
     * @param  string $consignment_reference Consignment to create (required)
     * @param  string $electio_api_version Electio API Version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConsignmentWithMetadataAsync($consignment_reference, $electio_api_version)
    {
        return $this->getConsignmentWithMetadataAsyncWithHttpInfo($consignment_reference, $electio_api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConsignmentWithMetadataAsyncWithHttpInfo
     *
     * Fetch a consignment by reference with metadata
     *
     * @param  string $consignment_reference Consignment to create (required)
     * @param  string $electio_api_version Electio API Version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConsignmentWithMetadataAsyncWithHttpInfo($consignment_reference, $electio_api_version)
    {
        $returnType = '\ChrisHemmings\Electio\Client\Model\Consignment';
        $request = $this->getConsignmentWithMetadataRequest($consignment_reference, $electio_api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConsignmentWithMetadata'
     *
     * @param  string $consignment_reference Consignment to create (required)
     * @param  string $electio_api_version Electio API Version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConsignmentWithMetadataRequest($consignment_reference, $electio_api_version)
    {
        // verify the required parameter 'consignment_reference' is set
        if ($consignment_reference === null || (is_array($consignment_reference) && count($consignment_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consignment_reference when calling getConsignmentWithMetadata'
            );
        }
        // verify the required parameter 'electio_api_version' is set
        if ($electio_api_version === null || (is_array($electio_api_version) && count($electio_api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electio_api_version when calling getConsignmentWithMetadata'
            );
        }

        $resourcePath = '/consignments/getconsignmentwithmetadata/{consignmentReference}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($electio_api_version !== null) {
            $headerParams['electio-api-version'] = ObjectSerializer::toHeaderValue($electio_api_version);
        }

        // path params
        if ($consignment_reference !== null) {
            $resourcePath = str_replace(
                '{' . 'consignmentReference' . '}',
                ObjectSerializer::toPathValue($consignment_reference),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchConsignments
     *
     * Search for consignments
     *
     * @param  int $take Number of records to get? (required)
     * @param  int $skip Number of records to skip (required)
     * @param  string $electio_api_version Electio API Version (required)
     * @param  string $creference Carrier reference (optional)
     * @param  string $state Consignment state (optional)
     *
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChrisHemmings\Electio\Client\Model\ConsignmentSearchResponse[]
     */
    public function searchConsignments($take, $skip, $electio_api_version, $creference = null, $state = null)
    {
        list($response) = $this->searchConsignmentsWithHttpInfo($take, $skip, $electio_api_version, $creference, $state);
        return $response;
    }

    /**
     * Operation searchConsignmentsWithHttpInfo
     *
     * Search for consignments
     *
     * @param  int $take Number of records to get? (required)
     * @param  int $skip Number of records to skip (required)
     * @param  string $electio_api_version Electio API Version (required)
     * @param  string $creference Carrier reference (optional)
     * @param  string $state Consignment state (optional)
     *
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChrisHemmings\Electio\Client\Model\ConsignmentSearchResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function searchConsignmentsWithHttpInfo($take, $skip, $electio_api_version, $creference = null, $state = null)
    {
        $returnType = '\ChrisHemmings\Electio\Client\Model\ConsignmentSearchResponse[]';
        $request = $this->searchConsignmentsRequest($take, $skip, $electio_api_version, $creference, $state);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChrisHemmings\Electio\Client\Model\ConsignmentSearchResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChrisHemmings\Electio\Client\Model\ResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchConsignmentsAsync
     *
     * Search for consignments
     *
     * @param  int $take Number of records to get? (required)
     * @param  int $skip Number of records to skip (required)
     * @param  string $electio_api_version Electio API Version (required)
     * @param  string $creference Carrier reference (optional)
     * @param  string $state Consignment state (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchConsignmentsAsync($take, $skip, $electio_api_version, $creference = null, $state = null)
    {
        return $this->searchConsignmentsAsyncWithHttpInfo($take, $skip, $electio_api_version, $creference, $state)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchConsignmentsAsyncWithHttpInfo
     *
     * Search for consignments
     *
     * @param  int $take Number of records to get? (required)
     * @param  int $skip Number of records to skip (required)
     * @param  string $electio_api_version Electio API Version (required)
     * @param  string $creference Carrier reference (optional)
     * @param  string $state Consignment state (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchConsignmentsAsyncWithHttpInfo($take, $skip, $electio_api_version, $creference = null, $state = null)
    {
        $returnType = '\ChrisHemmings\Electio\Client\Model\ConsignmentSearchResponse[]';
        $request = $this->searchConsignmentsRequest($take, $skip, $electio_api_version, $creference, $state);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchConsignments'
     *
     * @param  int $take Number of records to get? (required)
     * @param  int $skip Number of records to skip (required)
     * @param  string $electio_api_version Electio API Version (required)
     * @param  string $creference Carrier reference (optional)
     * @param  string $state Consignment state (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchConsignmentsRequest($take, $skip, $electio_api_version, $creference = null, $state = null)
    {
        // verify the required parameter 'take' is set
        if ($take === null || (is_array($take) && count($take) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $take when calling searchConsignments'
            );
        }
        // verify the required parameter 'skip' is set
        if ($skip === null || (is_array($skip) && count($skip) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $skip when calling searchConsignments'
            );
        }
        // verify the required parameter 'electio_api_version' is set
        if ($electio_api_version === null || (is_array($electio_api_version) && count($electio_api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electio_api_version when calling searchConsignments'
            );
        }

        $resourcePath = '/consignments/{take}/{skip}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($creference !== null) {
            $queryParams['Creference'] = ObjectSerializer::toQueryValue($creference);
        }
        // query params
        if ($state !== null) {
            $queryParams['State'] = ObjectSerializer::toQueryValue($state);
        }
        // header params
        if ($electio_api_version !== null) {
            $headerParams['electio-api-version'] = ObjectSerializer::toHeaderValue($electio_api_version);
        }

        // path params
        if ($take !== null) {
            $resourcePath = str_replace(
                '{' . 'take' . '}',
                ObjectSerializer::toPathValue($take),
                $resourcePath
            );
        }
        // path params
        if ($skip !== null) {
            $resourcePath = str_replace(
                '{' . 'skip' . '}',
                ObjectSerializer::toPathValue($skip),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
