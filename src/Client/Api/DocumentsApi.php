<?php
/**
 * DocumentsApi
 * PHP version 5
 *
 * @category Class
 * @package  ChrisHemmings\Electio
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Electio API
 *
 * A minimal Electio client
 *
 * OpenAPI spec version: 1.0.1
 * Contact: chris@hemmin.gs
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChrisHemmings\Electio\Client\Api;

use \ChrisHemmings\Electio\ApiClient;
use \ChrisHemmings\Electio\ApiException;
use \ChrisHemmings\Electio\Configuration;
use \ChrisHemmings\Electio\ObjectSerializer;

/**
 * DocumentsApi Class Doc Comment
 *
 * @category Class
 * @package  ChrisHemmings\Electio
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentsApi
{
    /**
     * API Client
     *
     * @var \ChrisHemmings\Electio\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ChrisHemmings\Electio\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ChrisHemmings\Electio\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ChrisHemmings\Electio\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ChrisHemmings\Electio\ApiClient $apiClient set the API client
     *
     * @return DocumentsApi
     */
    public function setApiClient(\ChrisHemmings\Electio\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getConsignmentDocuments
     *
     * Fetch customs documents
     *
     * @param string $consignment_reference Consignment to create (required)
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @return \ChrisHemmings\Electio\Client\Model\ConsignmentDocumentsResponse
     */
    public function getConsignmentDocuments($consignment_reference)
    {
        list($response) = $this->getConsignmentDocumentsWithHttpInfo($consignment_reference);
        return $response;
    }

    /**
     * Operation getConsignmentDocumentsWithHttpInfo
     *
     * Fetch customs documents
     *
     * @param string $consignment_reference Consignment to create (required)
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @return array of \ChrisHemmings\Electio\Client\Model\ConsignmentDocumentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConsignmentDocumentsWithHttpInfo($consignment_reference)
    {
        // verify the required parameter 'consignment_reference' is set
        if ($consignment_reference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consignment_reference when calling getConsignmentDocuments');
        }
        // parse inputs
        $resourcePath = "/consignments/docs/{consignmentReference}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($consignment_reference !== null) {
            $resourcePath = str_replace(
                "{" . "consignmentReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($consignment_reference),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ChrisHemmings\Electio\Client\Model\ConsignmentDocumentsResponse',
                '/consignments/docs/{consignmentReference}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ChrisHemmings\Electio\Client\Model\ConsignmentDocumentsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ChrisHemmings\Electio\Client\Model\ConsignmentDocumentsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getConsignmentLabels
     *
     * Fetch labels for a specified consignment
     *
     * @param string $consignment_reference Consignment Reference (required)
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @return \ChrisHemmings\Electio\Client\Model\LabelResponse
     */
    public function getConsignmentLabels($consignment_reference)
    {
        list($response) = $this->getConsignmentLabelsWithHttpInfo($consignment_reference);
        return $response;
    }

    /**
     * Operation getConsignmentLabelsWithHttpInfo
     *
     * Fetch labels for a specified consignment
     *
     * @param string $consignment_reference Consignment Reference (required)
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @return array of \ChrisHemmings\Electio\Client\Model\LabelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConsignmentLabelsWithHttpInfo($consignment_reference)
    {
        // verify the required parameter 'consignment_reference' is set
        if ($consignment_reference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consignment_reference when calling getConsignmentLabels');
        }
        // parse inputs
        $resourcePath = "/documents/labels/{consignmentReference}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($consignment_reference !== null) {
            $resourcePath = str_replace(
                "{" . "consignmentReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($consignment_reference),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ChrisHemmings\Electio\Client\Model\LabelResponse',
                '/documents/labels/{consignmentReference}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ChrisHemmings\Electio\Client\Model\LabelResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ChrisHemmings\Electio\Client\Model\LabelResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPackageDocument
     *
     * Fetch specific document type for given Parcel and Package
     *
     * @param string $customs_document_type Type of document required (required)
     * @param string $consignment_reference Consignment reference (required)
     * @param string $package_reference Package reference (required)
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @return string
     */
    public function getPackageDocument($customs_document_type, $consignment_reference, $package_reference)
    {
        list($response) = $this->getPackageDocumentWithHttpInfo($customs_document_type, $consignment_reference, $package_reference);
        return $response;
    }

    /**
     * Operation getPackageDocumentWithHttpInfo
     *
     * Fetch specific document type for given Parcel and Package
     *
     * @param string $customs_document_type Type of document required (required)
     * @param string $consignment_reference Consignment reference (required)
     * @param string $package_reference Package reference (required)
     * @throws \ChrisHemmings\Electio\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPackageDocumentWithHttpInfo($customs_document_type, $consignment_reference, $package_reference)
    {
        // verify the required parameter 'customs_document_type' is set
        if ($customs_document_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customs_document_type when calling getPackageDocument');
        }
        // verify the required parameter 'consignment_reference' is set
        if ($consignment_reference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consignment_reference when calling getPackageDocument');
        }
        // verify the required parameter 'package_reference' is set
        if ($package_reference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $package_reference when calling getPackageDocument');
        }
        // parse inputs
        $resourcePath = "/consignments/docs/{customsDocumentType}/{consignmentReference}/{packageReference}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($customs_document_type !== null) {
            $resourcePath = str_replace(
                "{" . "customsDocumentType" . "}",
                $this->apiClient->getSerializer()->toPathValue($customs_document_type),
                $resourcePath
            );
        }
        // path params
        if ($consignment_reference !== null) {
            $resourcePath = str_replace(
                "{" . "consignmentReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($consignment_reference),
                $resourcePath
            );
        }
        // path params
        if ($package_reference !== null) {
            $resourcePath = str_replace(
                "{" . "packageReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($package_reference),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/consignments/docs/{customsDocumentType}/{consignmentReference}/{packageReference}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
