<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  ChrisHemmings\Electio
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Electio API
 *
 * A minimal Electio client
 *
 * OpenAPI spec version: 1.0.7
 * Contact: chris@hemmin.gs
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChrisHemmings\Electio\Client\Model;

use \ArrayAccess;
use \ChrisHemmings\Electio\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @package  ChrisHemmings\Electio
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Item implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reference' => 'string',
        'item_reference_assigned_by_customer' => 'string',
        'sku' => 'string',
        'description' => 'string',
        'model' => 'string',
        'country_of_origin' => '\ChrisHemmings\Electio\Client\Model\Country',
        'harmonisation_code' => 'string',
        'weight' => '\ChrisHemmings\Electio\Client\Model\Weight',
        'dimensions' => '\ChrisHemmings\Electio\Client\Model\Dimensions',
        'value' => '\ChrisHemmings\Electio\Client\Model\Money',
        'barcode' => '\ChrisHemmings\Electio\Client\Model\Barcode',
        'meta_data' => '\ChrisHemmings\Electio\Client\Model\MetaData[]',
        'harmonisation_key_words' => 'string[]',
        'unit' => 'string',
        'quantity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reference' => null,
        'item_reference_assigned_by_customer' => null,
        'sku' => null,
        'description' => null,
        'model' => null,
        'country_of_origin' => null,
        'harmonisation_code' => null,
        'weight' => null,
        'dimensions' => null,
        'value' => null,
        'barcode' => null,
        'meta_data' => null,
        'harmonisation_key_words' => null,
        'unit' => null,
        'quantity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reference' => 'Reference',
        'item_reference_assigned_by_customer' => 'ItemReferenceAssignedByCustomer',
        'sku' => 'Sku',
        'description' => 'Description',
        'model' => 'Model',
        'country_of_origin' => 'CountryOfOrigin',
        'harmonisation_code' => 'HarmonisationCode',
        'weight' => 'Weight',
        'dimensions' => 'Dimensions',
        'value' => 'Value',
        'barcode' => 'Barcode',
        'meta_data' => 'MetaData',
        'harmonisation_key_words' => 'HarmonisationKeyWords',
        'unit' => 'Unit',
        'quantity' => 'Quantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reference' => 'setReference',
        'item_reference_assigned_by_customer' => 'setItemReferenceAssignedByCustomer',
        'sku' => 'setSku',
        'description' => 'setDescription',
        'model' => 'setModel',
        'country_of_origin' => 'setCountryOfOrigin',
        'harmonisation_code' => 'setHarmonisationCode',
        'weight' => 'setWeight',
        'dimensions' => 'setDimensions',
        'value' => 'setValue',
        'barcode' => 'setBarcode',
        'meta_data' => 'setMetaData',
        'harmonisation_key_words' => 'setHarmonisationKeyWords',
        'unit' => 'setUnit',
        'quantity' => 'setQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reference' => 'getReference',
        'item_reference_assigned_by_customer' => 'getItemReferenceAssignedByCustomer',
        'sku' => 'getSku',
        'description' => 'getDescription',
        'model' => 'getModel',
        'country_of_origin' => 'getCountryOfOrigin',
        'harmonisation_code' => 'getHarmonisationCode',
        'weight' => 'getWeight',
        'dimensions' => 'getDimensions',
        'value' => 'getValue',
        'barcode' => 'getBarcode',
        'meta_data' => 'getMetaData',
        'harmonisation_key_words' => 'getHarmonisationKeyWords',
        'unit' => 'getUnit',
        'quantity' => 'getQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['item_reference_assigned_by_customer'] = isset($data['item_reference_assigned_by_customer']) ? $data['item_reference_assigned_by_customer'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['country_of_origin'] = isset($data['country_of_origin']) ? $data['country_of_origin'] : null;
        $this->container['harmonisation_code'] = isset($data['harmonisation_code']) ? $data['harmonisation_code'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['meta_data'] = isset($data['meta_data']) ? $data['meta_data'] : null;
        $this->container['harmonisation_key_words'] = isset($data['harmonisation_key_words']) ? $data['harmonisation_key_words'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['country_of_origin'] === null) {
            $invalidProperties[] = "'country_of_origin' can't be null";
        }
        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if ($this->container['dimensions'] === null) {
            $invalidProperties[] = "'dimensions' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets item_reference_assigned_by_customer
     *
     * @return string
     */
    public function getItemReferenceAssignedByCustomer()
    {
        return $this->container['item_reference_assigned_by_customer'];
    }

    /**
     * Sets item_reference_assigned_by_customer
     *
     * @param string $item_reference_assigned_by_customer item_reference_assigned_by_customer
     *
     * @return $this
     */
    public function setItemReferenceAssignedByCustomer($item_reference_assigned_by_customer)
    {
        $this->container['item_reference_assigned_by_customer'] = $item_reference_assigned_by_customer;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets country_of_origin
     *
     * @return \ChrisHemmings\Electio\Client\Model\Country
     */
    public function getCountryOfOrigin()
    {
        return $this->container['country_of_origin'];
    }

    /**
     * Sets country_of_origin
     *
     * @param \ChrisHemmings\Electio\Client\Model\Country $country_of_origin country_of_origin
     *
     * @return $this
     */
    public function setCountryOfOrigin($country_of_origin)
    {
        $this->container['country_of_origin'] = $country_of_origin;

        return $this;
    }

    /**
     * Gets harmonisation_code
     *
     * @return string
     */
    public function getHarmonisationCode()
    {
        return $this->container['harmonisation_code'];
    }

    /**
     * Sets harmonisation_code
     *
     * @param string $harmonisation_code harmonisation_code
     *
     * @return $this
     */
    public function setHarmonisationCode($harmonisation_code)
    {
        $this->container['harmonisation_code'] = $harmonisation_code;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \ChrisHemmings\Electio\Client\Model\Weight
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \ChrisHemmings\Electio\Client\Model\Weight $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \ChrisHemmings\Electio\Client\Model\Dimensions
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \ChrisHemmings\Electio\Client\Model\Dimensions $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets value
     *
     * @return \ChrisHemmings\Electio\Client\Model\Money
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param \ChrisHemmings\Electio\Client\Model\Money $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return \ChrisHemmings\Electio\Client\Model\Barcode
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param \ChrisHemmings\Electio\Client\Model\Barcode $barcode barcode
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return \ChrisHemmings\Electio\Client\Model\MetaData[]
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param \ChrisHemmings\Electio\Client\Model\MetaData[] $meta_data meta_data
     *
     * @return $this
     */
    public function setMetaData($meta_data)
    {
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets harmonisation_key_words
     *
     * @return string[]
     */
    public function getHarmonisationKeyWords()
    {
        return $this->container['harmonisation_key_words'];
    }

    /**
     * Sets harmonisation_key_words
     *
     * @param string[] $harmonisation_key_words harmonisation_key_words
     *
     * @return $this
     */
    public function setHarmonisationKeyWords($harmonisation_key_words)
    {
        $this->container['harmonisation_key_words'] = $harmonisation_key_words;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


