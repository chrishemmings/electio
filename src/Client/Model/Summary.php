<?php
/**
 * Summary
 *
 * PHP version 5
 *
 * @category Class
 * @package  ChrisHemmings\Electio
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Electio API
 *
 * A minimal Electio client
 *
 * OpenAPI spec version: 1.0.0
 * Contact: chris@hemmin.gs
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChrisHemmings\Electio\Client\Model;

use \ArrayAccess;

/**
 * Summary Class Doc Comment
 *
 * @category    Class
 * @package     ChrisHemmings\Electio
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Summary implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Summary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'unallocated' => 'int',
        'allocation_failed' => 'int',
        'allocated' => 'int',
        'manifested' => 'int',
        'manifest_failed' => 'int',
        'at_drop_off_point' => 'int',
        'collected' => 'int',
        'collection_failed' => 'int',
        'in_transit' => 'int',
        'delayed' => 'int',
        'out_for_delivery' => 'int',
        'delivery_failed' => 'int',
        'delivery_failed_card_left' => 'int',
        'delivered' => 'int',
        'partially_delivered' => 'int',
        'at_collection_point' => 'int',
        'return_to_sender' => 'int',
        'action_required' => 'int',
        'missing' => 'int',
        'lost' => 'int',
        'damaged' => 'int',
        'cancelled' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'unallocated' => 'unallocated',
        'allocation_failed' => 'allocationFailed',
        'allocated' => 'allocated',
        'manifested' => 'manifested',
        'manifest_failed' => 'manifestFailed',
        'at_drop_off_point' => 'atDropOffPoint',
        'collected' => 'collected',
        'collection_failed' => 'collectionFailed',
        'in_transit' => 'inTransit',
        'delayed' => 'delayed',
        'out_for_delivery' => 'outForDelivery',
        'delivery_failed' => 'deliveryFailed',
        'delivery_failed_card_left' => 'deliveryFailedCardLeft',
        'delivered' => 'delivered',
        'partially_delivered' => 'partiallyDelivered',
        'at_collection_point' => 'atCollectionPoint',
        'return_to_sender' => 'returnToSender',
        'action_required' => 'actionRequired',
        'missing' => 'missing',
        'lost' => 'lost',
        'damaged' => 'damaged',
        'cancelled' => 'cancelled'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'unallocated' => 'setUnallocated',
        'allocation_failed' => 'setAllocationFailed',
        'allocated' => 'setAllocated',
        'manifested' => 'setManifested',
        'manifest_failed' => 'setManifestFailed',
        'at_drop_off_point' => 'setAtDropOffPoint',
        'collected' => 'setCollected',
        'collection_failed' => 'setCollectionFailed',
        'in_transit' => 'setInTransit',
        'delayed' => 'setDelayed',
        'out_for_delivery' => 'setOutForDelivery',
        'delivery_failed' => 'setDeliveryFailed',
        'delivery_failed_card_left' => 'setDeliveryFailedCardLeft',
        'delivered' => 'setDelivered',
        'partially_delivered' => 'setPartiallyDelivered',
        'at_collection_point' => 'setAtCollectionPoint',
        'return_to_sender' => 'setReturnToSender',
        'action_required' => 'setActionRequired',
        'missing' => 'setMissing',
        'lost' => 'setLost',
        'damaged' => 'setDamaged',
        'cancelled' => 'setCancelled'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'unallocated' => 'getUnallocated',
        'allocation_failed' => 'getAllocationFailed',
        'allocated' => 'getAllocated',
        'manifested' => 'getManifested',
        'manifest_failed' => 'getManifestFailed',
        'at_drop_off_point' => 'getAtDropOffPoint',
        'collected' => 'getCollected',
        'collection_failed' => 'getCollectionFailed',
        'in_transit' => 'getInTransit',
        'delayed' => 'getDelayed',
        'out_for_delivery' => 'getOutForDelivery',
        'delivery_failed' => 'getDeliveryFailed',
        'delivery_failed_card_left' => 'getDeliveryFailedCardLeft',
        'delivered' => 'getDelivered',
        'partially_delivered' => 'getPartiallyDelivered',
        'at_collection_point' => 'getAtCollectionPoint',
        'return_to_sender' => 'getReturnToSender',
        'action_required' => 'getActionRequired',
        'missing' => 'getMissing',
        'lost' => 'getLost',
        'damaged' => 'getDamaged',
        'cancelled' => 'getCancelled'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unallocated'] = isset($data['unallocated']) ? $data['unallocated'] : null;
        $this->container['allocation_failed'] = isset($data['allocation_failed']) ? $data['allocation_failed'] : null;
        $this->container['allocated'] = isset($data['allocated']) ? $data['allocated'] : null;
        $this->container['manifested'] = isset($data['manifested']) ? $data['manifested'] : null;
        $this->container['manifest_failed'] = isset($data['manifest_failed']) ? $data['manifest_failed'] : null;
        $this->container['at_drop_off_point'] = isset($data['at_drop_off_point']) ? $data['at_drop_off_point'] : null;
        $this->container['collected'] = isset($data['collected']) ? $data['collected'] : null;
        $this->container['collection_failed'] = isset($data['collection_failed']) ? $data['collection_failed'] : null;
        $this->container['in_transit'] = isset($data['in_transit']) ? $data['in_transit'] : null;
        $this->container['delayed'] = isset($data['delayed']) ? $data['delayed'] : null;
        $this->container['out_for_delivery'] = isset($data['out_for_delivery']) ? $data['out_for_delivery'] : null;
        $this->container['delivery_failed'] = isset($data['delivery_failed']) ? $data['delivery_failed'] : null;
        $this->container['delivery_failed_card_left'] = isset($data['delivery_failed_card_left']) ? $data['delivery_failed_card_left'] : null;
        $this->container['delivered'] = isset($data['delivered']) ? $data['delivered'] : null;
        $this->container['partially_delivered'] = isset($data['partially_delivered']) ? $data['partially_delivered'] : null;
        $this->container['at_collection_point'] = isset($data['at_collection_point']) ? $data['at_collection_point'] : null;
        $this->container['return_to_sender'] = isset($data['return_to_sender']) ? $data['return_to_sender'] : null;
        $this->container['action_required'] = isset($data['action_required']) ? $data['action_required'] : null;
        $this->container['missing'] = isset($data['missing']) ? $data['missing'] : null;
        $this->container['lost'] = isset($data['lost']) ? $data['lost'] : null;
        $this->container['damaged'] = isset($data['damaged']) ? $data['damaged'] : null;
        $this->container['cancelled'] = isset($data['cancelled']) ? $data['cancelled'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets unallocated
     * @return int
     */
    public function getUnallocated()
    {
        return $this->container['unallocated'];
    }

    /**
     * Sets unallocated
     * @param int $unallocated
     * @return $this
     */
    public function setUnallocated($unallocated)
    {
        $this->container['unallocated'] = $unallocated;

        return $this;
    }

    /**
     * Gets allocation_failed
     * @return int
     */
    public function getAllocationFailed()
    {
        return $this->container['allocation_failed'];
    }

    /**
     * Sets allocation_failed
     * @param int $allocation_failed
     * @return $this
     */
    public function setAllocationFailed($allocation_failed)
    {
        $this->container['allocation_failed'] = $allocation_failed;

        return $this;
    }

    /**
     * Gets allocated
     * @return int
     */
    public function getAllocated()
    {
        return $this->container['allocated'];
    }

    /**
     * Sets allocated
     * @param int $allocated
     * @return $this
     */
    public function setAllocated($allocated)
    {
        $this->container['allocated'] = $allocated;

        return $this;
    }

    /**
     * Gets manifested
     * @return int
     */
    public function getManifested()
    {
        return $this->container['manifested'];
    }

    /**
     * Sets manifested
     * @param int $manifested
     * @return $this
     */
    public function setManifested($manifested)
    {
        $this->container['manifested'] = $manifested;

        return $this;
    }

    /**
     * Gets manifest_failed
     * @return int
     */
    public function getManifestFailed()
    {
        return $this->container['manifest_failed'];
    }

    /**
     * Sets manifest_failed
     * @param int $manifest_failed
     * @return $this
     */
    public function setManifestFailed($manifest_failed)
    {
        $this->container['manifest_failed'] = $manifest_failed;

        return $this;
    }

    /**
     * Gets at_drop_off_point
     * @return int
     */
    public function getAtDropOffPoint()
    {
        return $this->container['at_drop_off_point'];
    }

    /**
     * Sets at_drop_off_point
     * @param int $at_drop_off_point
     * @return $this
     */
    public function setAtDropOffPoint($at_drop_off_point)
    {
        $this->container['at_drop_off_point'] = $at_drop_off_point;

        return $this;
    }

    /**
     * Gets collected
     * @return int
     */
    public function getCollected()
    {
        return $this->container['collected'];
    }

    /**
     * Sets collected
     * @param int $collected
     * @return $this
     */
    public function setCollected($collected)
    {
        $this->container['collected'] = $collected;

        return $this;
    }

    /**
     * Gets collection_failed
     * @return int
     */
    public function getCollectionFailed()
    {
        return $this->container['collection_failed'];
    }

    /**
     * Sets collection_failed
     * @param int $collection_failed
     * @return $this
     */
    public function setCollectionFailed($collection_failed)
    {
        $this->container['collection_failed'] = $collection_failed;

        return $this;
    }

    /**
     * Gets in_transit
     * @return int
     */
    public function getInTransit()
    {
        return $this->container['in_transit'];
    }

    /**
     * Sets in_transit
     * @param int $in_transit
     * @return $this
     */
    public function setInTransit($in_transit)
    {
        $this->container['in_transit'] = $in_transit;

        return $this;
    }

    /**
     * Gets delayed
     * @return int
     */
    public function getDelayed()
    {
        return $this->container['delayed'];
    }

    /**
     * Sets delayed
     * @param int $delayed
     * @return $this
     */
    public function setDelayed($delayed)
    {
        $this->container['delayed'] = $delayed;

        return $this;
    }

    /**
     * Gets out_for_delivery
     * @return int
     */
    public function getOutForDelivery()
    {
        return $this->container['out_for_delivery'];
    }

    /**
     * Sets out_for_delivery
     * @param int $out_for_delivery
     * @return $this
     */
    public function setOutForDelivery($out_for_delivery)
    {
        $this->container['out_for_delivery'] = $out_for_delivery;

        return $this;
    }

    /**
     * Gets delivery_failed
     * @return int
     */
    public function getDeliveryFailed()
    {
        return $this->container['delivery_failed'];
    }

    /**
     * Sets delivery_failed
     * @param int $delivery_failed
     * @return $this
     */
    public function setDeliveryFailed($delivery_failed)
    {
        $this->container['delivery_failed'] = $delivery_failed;

        return $this;
    }

    /**
     * Gets delivery_failed_card_left
     * @return int
     */
    public function getDeliveryFailedCardLeft()
    {
        return $this->container['delivery_failed_card_left'];
    }

    /**
     * Sets delivery_failed_card_left
     * @param int $delivery_failed_card_left
     * @return $this
     */
    public function setDeliveryFailedCardLeft($delivery_failed_card_left)
    {
        $this->container['delivery_failed_card_left'] = $delivery_failed_card_left;

        return $this;
    }

    /**
     * Gets delivered
     * @return int
     */
    public function getDelivered()
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     * @param int $delivered
     * @return $this
     */
    public function setDelivered($delivered)
    {
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets partially_delivered
     * @return int
     */
    public function getPartiallyDelivered()
    {
        return $this->container['partially_delivered'];
    }

    /**
     * Sets partially_delivered
     * @param int $partially_delivered
     * @return $this
     */
    public function setPartiallyDelivered($partially_delivered)
    {
        $this->container['partially_delivered'] = $partially_delivered;

        return $this;
    }

    /**
     * Gets at_collection_point
     * @return int
     */
    public function getAtCollectionPoint()
    {
        return $this->container['at_collection_point'];
    }

    /**
     * Sets at_collection_point
     * @param int $at_collection_point
     * @return $this
     */
    public function setAtCollectionPoint($at_collection_point)
    {
        $this->container['at_collection_point'] = $at_collection_point;

        return $this;
    }

    /**
     * Gets return_to_sender
     * @return int
     */
    public function getReturnToSender()
    {
        return $this->container['return_to_sender'];
    }

    /**
     * Sets return_to_sender
     * @param int $return_to_sender
     * @return $this
     */
    public function setReturnToSender($return_to_sender)
    {
        $this->container['return_to_sender'] = $return_to_sender;

        return $this;
    }

    /**
     * Gets action_required
     * @return int
     */
    public function getActionRequired()
    {
        return $this->container['action_required'];
    }

    /**
     * Sets action_required
     * @param int $action_required
     * @return $this
     */
    public function setActionRequired($action_required)
    {
        $this->container['action_required'] = $action_required;

        return $this;
    }

    /**
     * Gets missing
     * @return int
     */
    public function getMissing()
    {
        return $this->container['missing'];
    }

    /**
     * Sets missing
     * @param int $missing
     * @return $this
     */
    public function setMissing($missing)
    {
        $this->container['missing'] = $missing;

        return $this;
    }

    /**
     * Gets lost
     * @return int
     */
    public function getLost()
    {
        return $this->container['lost'];
    }

    /**
     * Sets lost
     * @param int $lost
     * @return $this
     */
    public function setLost($lost)
    {
        $this->container['lost'] = $lost;

        return $this;
    }

    /**
     * Gets damaged
     * @return int
     */
    public function getDamaged()
    {
        return $this->container['damaged'];
    }

    /**
     * Sets damaged
     * @param int $damaged
     * @return $this
     */
    public function setDamaged($damaged)
    {
        $this->container['damaged'] = $damaged;

        return $this;
    }

    /**
     * Gets cancelled
     * @return int
     */
    public function getCancelled()
    {
        return $this->container['cancelled'];
    }

    /**
     * Sets cancelled
     * @param int $cancelled
     * @return $this
     */
    public function setCancelled($cancelled)
    {
        $this->container['cancelled'] = $cancelled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ChrisHemmings\Electio\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ChrisHemmings\Electio\ObjectSerializer::sanitizeForSerialization($this));
    }
}


