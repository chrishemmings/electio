<?php
/**
 * MetaData
 *
 * PHP version 5
 *
 * @category Class
 * @package  ChrisHemmings\Electio
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Electio API
 *
 * A minimal Electio client
 *
 * OpenAPI spec version: 1.0.12
 * Contact: chris@hemmin.gs
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChrisHemmings\Electio\Client\Model;

use \ArrayAccess;
use \ChrisHemmings\Electio\ObjectSerializer;

/**
 * MetaData Class Doc Comment
 *
 * @category Class
 * @package  ChrisHemmings\Electio
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MetaData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MetaData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'key_value' => 'string',
        'string_value' => 'string',
        'int_value' => 'int',
        'decimal_value' => 'float',
        'bool_value' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'key_value' => null,
        'string_value' => null,
        'int_value' => null,
        'decimal_value' => 'float',
        'bool_value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key_value' => 'KeyValue',
        'string_value' => 'StringValue',
        'int_value' => 'IntValue',
        'decimal_value' => 'DecimalValue',
        'bool_value' => 'BoolValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key_value' => 'setKeyValue',
        'string_value' => 'setStringValue',
        'int_value' => 'setIntValue',
        'decimal_value' => 'setDecimalValue',
        'bool_value' => 'setBoolValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key_value' => 'getKeyValue',
        'string_value' => 'getStringValue',
        'int_value' => 'getIntValue',
        'decimal_value' => 'getDecimalValue',
        'bool_value' => 'getBoolValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key_value'] = isset($data['key_value']) ? $data['key_value'] : null;
        $this->container['string_value'] = isset($data['string_value']) ? $data['string_value'] : null;
        $this->container['int_value'] = isset($data['int_value']) ? $data['int_value'] : null;
        $this->container['decimal_value'] = isset($data['decimal_value']) ? $data['decimal_value'] : null;
        $this->container['bool_value'] = isset($data['bool_value']) ? $data['bool_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['key_value'] === null) {
            $invalidProperties[] = "'key_value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key_value
     *
     * @return string
     */
    public function getKeyValue()
    {
        return $this->container['key_value'];
    }

    /**
     * Sets key_value
     *
     * @param string $key_value key_value
     *
     * @return $this
     */
    public function setKeyValue($key_value)
    {
        $this->container['key_value'] = $key_value;

        return $this;
    }

    /**
     * Gets string_value
     *
     * @return string
     */
    public function getStringValue()
    {
        return $this->container['string_value'];
    }

    /**
     * Sets string_value
     *
     * @param string $string_value string_value
     *
     * @return $this
     */
    public function setStringValue($string_value)
    {
        $this->container['string_value'] = $string_value;

        return $this;
    }

    /**
     * Gets int_value
     *
     * @return int
     */
    public function getIntValue()
    {
        return $this->container['int_value'];
    }

    /**
     * Sets int_value
     *
     * @param int $int_value int_value
     *
     * @return $this
     */
    public function setIntValue($int_value)
    {
        $this->container['int_value'] = $int_value;

        return $this;
    }

    /**
     * Gets decimal_value
     *
     * @return float
     */
    public function getDecimalValue()
    {
        return $this->container['decimal_value'];
    }

    /**
     * Sets decimal_value
     *
     * @param float $decimal_value decimal_value
     *
     * @return $this
     */
    public function setDecimalValue($decimal_value)
    {
        $this->container['decimal_value'] = $decimal_value;

        return $this;
    }

    /**
     * Gets bool_value
     *
     * @return bool
     */
    public function getBoolValue()
    {
        return $this->container['bool_value'];
    }

    /**
     * Sets bool_value
     *
     * @param bool $bool_value bool_value
     *
     * @return $this
     */
    public function setBoolValue($bool_value)
    {
        $this->container['bool_value'] = $bool_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


